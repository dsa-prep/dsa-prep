# apply the knapsack algorithm

The algorithm is provided, but I remember failing at this in the past
  , because didn't understand the notation

We find pseudo code from an alternative source

// Input:
// Values (stored in array v) // a.k.a. benefit , utility
// Weights (stored in array w)
// Number of distinct items (n)
// Knapsack capacity (W)

def knapsack01(v,w,n,W):

  matrix m

  for i in range(0,W):
      m[0] = []
      m[0][j] = 0

  for i in range (1,n):
    for j in range(0,W):
       if w[i] > j then:
           m[i][j] = m[i-1][j]
       else:
           m[i][j] = max(m[i-1][j], m[i-1][j-w[i]] + v[i])
